@page
@using Hik.Client.Helpers
@model Hik.Web.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<div class="row">
    <div class="card-body card-style">
        <h2>Dashboard</h2>
        <form class="date-form">
            <input asp-for="Day" type="date" class="form-control input-date" />
            <input type="submit" value="Filter" />
        </form>
    </div>
</div>

@* @await Html.PartialAsync("_Timer.cshtml") *@

@if (Model.JobTriggers != null && Model.JobTriggers.Any())
{
    @foreach (var className in Model.JobTriggers.Keys.OrderBy(x => x))
    {
     var jobType = Model.JobTriggers[className];
     @if(jobType != null && jobType.Any())
     {
             var jobTriggers = jobType.OrderBy(x => x.Name).ToList();
             <div class="row">
                 <div class="card-body text-center">
                     <h4 class="card-title">@Html.DisplayFor(x => className)</h4>
                 </div>
             </div>
             <div class="row">
                <table class="table table-striped" aria-label="Dashboard">
                     <thead>
                         <tr>
                             <th>@Html.DisplayNameFor(model => jobTriggers.FirstOrDefault().Name)</th>
                             <th>Last Job</th>
                             <th>Last File</th>
                             <th>Delta</th>
                             <th>Files</th>
                             <th>Size</th>
                             <th>Duration</th>
                         </tr>
                     </thead>
                     <tbody>

                        @{
                            long todayTotalDuration = 0;
                            long todaySize = 0;
                            long todayFiles = 0;

                            @foreach (var jobTrigger in jobTriggers)
                            {
                                var stat = Model.Dto.DailyStatistics.FirstOrDefault(x => x.JobTriggerId == jobTrigger.Id);
                                long statSize = stat?.FilesSize ?? 0;
                                int statDuration = stat?.TotalDuration ?? 0;
                                string size = statSize !=0 ? statSize.FormatBytes() : "0";
                                string duration = ((double)statDuration).FormatSeconds();
                                string triggerString = jobTrigger.ToString();
                                todayTotalDuration += statDuration;
                                todaySize += statSize;
                                todayFiles += stat?.FilesCount ?? 0;

                                string lastFileDeltaString = "N/A";
                                string latestFileString = "N/A";
                                string latestFileRelativeString = "N/A";
                                string status = "";
                                string lastSyncString = jobTrigger.LastSync?.GetString() ?? "N/A";
                                int filesCount = stat?.FilesCount ?? 0;

                                @if (Model.Dto.Files.ContainsKey(jobTrigger.Id))
                                {
                                    DateTime latestFile = Model.Dto.Files[jobTrigger.Id];

                                    var now = Model.Day.Date == DateTime.Today ? DateTime.Now : Model.Day.AddDays(1);
                                    var lastFileDelta = (jobTrigger.LastSync ?? now) - latestFile;
                                    var lastSyncDelta = now - (jobTrigger.LastSync ?? new DateTime());
                                    var success = (lastFileDelta.TotalHours < 2 && lastSyncDelta.TotalHours < 2)
                                    || (className.Contains("GarbageCollector") && lastSyncDelta.TotalHours < 24);
                                    status = success ? "" : "failed";

                                    latestFileString = @latestFile.GetString();
                                    latestFileRelativeString = @latestFile.GetRelativeTime();
                                    lastFileDeltaString = @lastFileDelta.GetRelativeTime();
                                }

                                <tr data-status="@status" class="failed">
                                    <td><a asp-page="./DashboardDetails" asp-route-triggerId="@jobTrigger.Id">@triggerString</a></td>
                                    <td><span title="@jobTrigger.LastSync?.GetRelativeTime()">@lastSyncString</span></td>
                                    <td><span title="@latestFileRelativeString">@latestFileString</span></td>
                                    <td>@lastFileDeltaString</td>
                                    <td>@filesCount</td>
                                    <td>@size</td>
                                    <td>@duration</td>
                                </tr>
                            }
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>Total</td>
                                <td>@todayFiles</td>
                                <td>@todaySize.FormatBytes()</td>
                                <td>@todayTotalDuration.FormatSeconds()</td>
                            </tr>
                         }
                     </tbody>
                 </table>
             </div>
         }
     }
}