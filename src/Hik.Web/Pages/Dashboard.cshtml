@page
@using Hik.Client.Helpers
@model Hik.Web.Pages.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

<h2>Dashboard</h2>

@* @await Html.PartialAsync("_Timer.cshtml") *@

@if (Model.JobTriggers != null && Model.JobTriggers.Any())
{
    @foreach (var className in Model.JobTriggers.Keys.OrderBy(x => x))
    {
     var jobType = Model.JobTriggers[className];
     @if(jobType != null && jobType.Any())
     {
             var jobTriggers = jobType.OrderBy(x => x.Name).ToList();
             <div class="row">
                 <div class="card-body text-center">
                     <h4 class="card-title">@Html.DisplayFor(x => className)</h4>
                 </div>
             </div>
             <div class="row">
                <table class="table table-striped" aria-label="Dashboard">
                     <thead>
                         <tr>
                             <th>@Html.DisplayNameFor(model => jobTriggers.FirstOrDefault().Name)</th>
                             <th>Last Job</th>
                             <th>Last File</th>
                             <th>Delta</th>
                             <th>Files</th>
                             <th>Size</th>
                             <th>Duration</th>
                             <th>Processing</th>
                         </tr>
                     </thead>
                     <tbody>

                         @{
                            long todayProcessDuration = 0;
                            long todayTotalDuration = 0;
                            long todaySize = 0;
                            long todayFiles = 0;

                         @foreach (var jobTrigger in jobTriggers)
                         {
                            var stat = Model.Dto.DailyStatistics.FirstOrDefault(x => x.JobTriggerId == jobTrigger.Id);
                            long statSize = stat?.FilesSize ?? 0;
                            int statDuration = stat?.TotalDuration ?? 0;
                            string size = statSize.FormatBytes();
                            string duration = ((double)statDuration).FormatSeconds();
                            string processing = stat?.ProcessDuration.FormatMilliseconds();
                            string triggerString = jobTrigger.ToString();
                            todayTotalDuration += statDuration;
                            todayProcessDuration += (stat?.ProcessDuration ?? 0);
                            todaySize += statSize;
                            todayFiles += stat?.FilesCount ?? 0;

                            var latestFile = new DateTime();
                            @if(Model.Dto.Files.ContainsKey(jobTrigger.Id))
                            {
                                latestFile = Model.Dto.Files[jobTrigger.Id];
                            }

                            var now = DateTime.Now;
                            var lastFileDelta = (jobTrigger.LastSync ?? now) - latestFile;
                            var lastSyncDelta = now - (jobTrigger.LastSync ?? new DateTime());
                            var success = (lastFileDelta.TotalHours < 2 && lastSyncDelta.TotalHours < 2)
                                       || (className.Contains("GarbageCollector") && lastSyncDelta.TotalHours < 24);
                            var status = success ? "" : "failed";
                            <tr data-status="@status" class="failed">
                                <td><a asp-page="./DashboardDetails" asp-route-triggerId="@jobTrigger.Id">@triggerString</a></td>
                                <td><span title="@jobTrigger.LastSync?.GetRelativeTime()">@jobTrigger.LastSync?.GetString()</span></td>
                                <td><span title="@latestFile.GetRelativeTime()">@latestFile.GetString()</span></td>
                                <td>@lastFileDelta.GetRelativeTime()</td>
                                <td>@stat?.FilesCount</td>
                                <td>@size</td>
                                <td>@duration</td>
                                <td>@processing</td>
                            </tr>
                         }
                            <tr>
                                <td></td>
                                <td></td>
                                <td></td>
                                <td>Total</td>
                                <td>@todayFiles</td>
                                <td>@todaySize.FormatBytes()</td>
                                <td>@todayTotalDuration.FormatSeconds()</td>
                                <td>@todayProcessDuration.FormatMilliseconds()</td>
                            </tr>
                         }
                     </tbody>
                 </table>
             </div>
         }
     }
}